load("/Users/braydenjett/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
ggplot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot <- ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
EelPlot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot + theme(panel.background = element_rect(fill = "white"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", size = 0.5))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
EelPlot + geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
+ geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
vline = geom_vline(xintercept = 0, color = "gray", linetype = "solid"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_line(color = "gray"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, size = 1))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1))
install.packages("rstatix")
library(rstatix)
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
weight_anova <- eel_data %>%
group_by(year) %>%
summarise(mean_weight = mean(weight)) %>%
anova_test(dv = mean_weight, wid = year)
rlang::last_error()
weight_anova
library(ggplot2)
library(tidyr)
install.packages("pgirmess")
library(pgirmess)
kruskal.test(New_Data$length ~ New_Data$decade)
kruskal.test(New_Data$weight ~ New_Data$decade)
New_Data$decade
install.packages("dunn.test")
library(dunn.test)
dunn.test(New_Data$length, New_Data$decade, method = "bonferroni")
dunn.test(New_Data$weight, New_Data$decade, method = "bonferroni")
setwd("~/Desktop/Evolution/Tasks/Project/data")
Data <- read.csv("ImsaOtoData_2.csv")
names(Data)
Data$length
Data$weight
New_Data <- subset(Data, select = c(year, length, weight))
New_Data$length
New_Data <- subset(New_Data, complete.cases(New_Data$year, New_Data$length, New_Data$weight))
New_Data$length
New_Data$weight
New_Data$year
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled2.RData")
install.packages("brms")
library(brms)
View(New_Data)
View(New_Data)
formula <- brmsformula(length | weights(sd = 3) ~ year + (1|school),
weight | weights(sd = 3) ~ year + (1|school))
priors <- c(
prior(normal(0, 10), class = b),
prior(normal(0, 10), class = Intercept),
prior(cauchy(0, 2.5), class = sd)
)
model <- brm(formula, data = New_Data, prior = priors, chains = 4, iter = 2000)
formula <- brmsformula(length | weights(sd = sd_length) ~ year,
weight | weights(sd = sd_weight) ~ year)
formula <- brmsformula(length | weights(sd = 3) ~ year,
weight | weights(sd = 3) ~ year)
model <- brm(formula, data = New_Data, prior = priors, chains = 4, iter = 2000)
formula <- brmsformula(length | weights(sd = 3) ~ year,
weight | weights(sd = 3) ~ year)
model <- brm(formula, data = New_Data, prior = priors, chains = 4, iter = 2000, nl = TRUE)
model <- brm(formula, data = New_Data, prior = priors, chains = 4, iter = 2000, nl = TRUE)
View(New_Data)
rm(formula)
rm(priors)
data <- New_Data
model <- brm(weight ~ length + year, data = data)
model <- brm(weight ~ length + year, data = data,
prior = c(prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(halfnormal(0, 10), class = sigma)))
model <- brm(weight ~ length + year, data = data)
fit <- brm(weight ~ length + year, data = data,
prior = c(prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(halfnormal(0, 10), class = sigma)))
library(rstan)
fit <- brm(weight ~ length + year, data = data,
prior = c(prior(normal(0, 10), class = Intercept),
prior(normal(0, 10), class = b),
prior(halfnormal(0, 10), class = sigma)))
rm(data)
rm(model)
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled2.RData")
model_code <- "
data {
int<lower=0> N; // Number of observations
int<lower=1> year[N]; // Year of observation
vector[N] length; // Length measurements
vector[N] weight; // Weight measurements
}
parameters {
real alpha;
real beta_length;
real beta_weight;
real<lower=0> sigma_length;
real<lower=0> sigma_weight;
}
model {
vector[N] mu_length;
vector[N] mu_weight;
// Priors
alpha ~ normal(0, 10);
beta_length ~ normal(0, 10);
beta_weight ~ normal(0, 10);
sigma_length ~ cauchy(0, 2.5);
sigma_weight ~ cauchy(0, 2.5);
// Model
for (i in 1:N) {
mu_length[i] <- alpha + beta_length * year[i];
mu_weight[i] <- alpha + beta_weight * year[i];
length[i] ~ normal(mu_length[i], sigma_length);
weight[i] ~ normal(mu_weight[i], sigma_weight);
}
}
"
model <- stan_model(model_code = model_code)
fit <- sampling(model, data = list(N = nrow(New_Data), year = New_Data$year,
length = New_Data$length, weight = New_Data$weight),
chains = 4, iter = 2000, warmup = 1000, seed = 123)
print(fit)
plot(fit, pars = c("alpha", "beta_length", "beta_weight"))
rm(fit)
rm(model)
rm(model_code)
install.packages("stan")
J <- nrow(New_Data)  # Number of schools
y <- New_Data$length  # Treatment effect
sigma <- New_Data$weight  # Standard error
# Define the Bayesian model
model_code <- "
data {
int<lower=0> J;  // Number of schools
vector[J] y;  // Treatment effect
vector[J] sigma;  // Standard error
}
parameters {
real mu;  // Population treatment effect
real<lower=0> tau;  // Population standard deviation
vector[J] eta;  // School-level treatment effect
}
transformed parameters {
vector[J] theta;  // School-level treatment effect after standardization
theta <- mu + tau * eta / sqrt(J);
}
model {
mu ~ normal(0, 5);
tau ~ cauchy(0, 2.5);
eta ~ normal(0, 1);
y ~ normal(theta, sigma);
}
"
# Compile the model
model <- stan_model(model_code = model_code)
# Fit the model to the data
fit <- sampling(model, data = list(J = J, y = y, sigma = sigma),
chains = 4, iter = 2000, warmup = 1000, seed = 123)
# View a summary of the model fit
print(fit)
# Visualize the posterior distributions
plot(fit, pars = c("mu", "tau"))
rm(J)
rm(model_code)
rm(y)
rm(sigma)
rm(model)
rm(fit)
eel_data <- tidyr::gather(New_Data, "measurement", "value", -year)
ggplot(New_Data_long, aes(x = year, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = year, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = factor(year), y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
scale_x_continuous(breaks = c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016)) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = factor(year), y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
scale_x_continuous(breaks = c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016)) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
New_Data$year <- factor(New_Data$year, levels = c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016))
ggplot(eel_data, aes(x = year, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(New_Data, aes(x = year, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
labs(x = "Year", y = "Measurement", fill = "") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = year, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
labs(x = "Year", y = "Measurement", fill = "") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = measurement, y = value, fill = measurement)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) +
labs(x = "", y = "") +
facet_wrap(~ year, scales = "free_x") +
ggtitle("Comparison of Length and Weight by Year")
ggplot(eel_data, aes(x = year, y = value, fill = measurement)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
scale_fill_manual(values = c("blue", "red")) +
xlab("Year") +
ylab("Measurement") +
ggtitle("Comparison of Length and Weight by Year")
rm(eel_data)
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled2.RData")
