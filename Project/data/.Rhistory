load("/Users/braydenjett/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
ggplot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot <- ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
EelPlot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot + theme(panel.background = element_rect(fill = "white"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", size = 0.5))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
EelPlot + geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
+ geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
vline = geom_vline(xintercept = 0, color = "gray", linetype = "solid"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_line(color = "gray"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, size = 1))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1))
install.packages("rstatix")
library(rstatix)
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
weight_anova <- eel_data %>%
group_by(year) %>%
summarise(mean_weight = mean(weight)) %>%
anova_test(dv = mean_weight, wid = year)
rlang::last_error()
weight_anova
library(ggplot2)
library(tidyr)
install.packages("pgirmess")
library(pgirmess)
kruskal.test(New_Data$length ~ New_Data$decade)
kruskal.test(New_Data$weight ~ New_Data$decade)
New_Data$decade
install.packages("dunn.test")
library(dunn.test)
dunn.test(New_Data$length, New_Data$decade, method = "bonferroni")
dunn.test(New_Data$weight, New_Data$decade, method = "bonferroni")
setwd("~/Desktop/Evolution/Tasks/Project/data")
Data <- read.csv("ImsaOtoData_2.csv")
names(Data)
Data$length
Data$weight
New_Data <- subset(Data, select = c(year, length, weight))
New_Data$length
New_Data <- subset(New_Data, complete.cases(New_Data$year, New_Data$length, New_Data$weight))
New_Data$length
New_Data$weight
New_Data$year
New_Data$year <- factor(New_Data$year, levels = c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016))
eel_test <- brm(bf(length ~ (1 | year), sigma ~ (1 | year)),
data = New_Data, family = gaussian())
library(brms)
library(ggplot2)
library(rstan)
eel_test <- brm(bf(length ~ (1 | year), sigma ~ (1 | year)),
data = New_Data, family = gaussian())
eel_test
plot(eel_test)
weight_test <- brm(bf(weight ~ (1 | year), sigma ~ (1 | year)),
data = New_Data, family = gaussian())
weight_test
plot(weight_test)
LengthEffects <- ranef(eel_test)
WeightEffects <- ranef(weight_test)
# bayesplot & stanplot packages for pretty plots.
# you care about the random effect
plot(c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016), LengthEffects$year[,1,1], type="b")
plot(c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016), WeightEffects$year[,1,1], type="b")
?bayesplot
plot.coefficients(eel_test, pars = "b_Intercept", main = "Length Effects")
library(bayesplot)
plot.coefficients(eel_test, pars = "b_Intercept", main = "Length Effects")
stan_plot(LengthEffects, type = "intervals", point_est = "median",
point_size = 2, interval_shade = TRUE, interval_color = "skyblue",
prob_outer = 0.95, prob_inner = 0.50, ggtheme = bayesplot::theme_default(),
xlab = "Year", ylab = "Length Effects", main = "Posterior Distribution of Length Effects")
install.packages("jtools")
library(jtools)
plot_summs(eel_test, scale = FALSE, estimate_shape = TRUE, xlab = "Year", ylab = "Length Effects",
main = "Coefficients for Length Effects", ci_method = "HPD")
install.packages("broom")
library(broom)
plot_summs(eel_test, scale = FALSE, estimate_shape = TRUE, xlab = "Year", ylab = "Length Effects",
main = "Coefficients for Length Effects", ci_method = "HPD")
install.packages("broom.mixed")
library(broom.mixed)
plot_summs(eel_test, scale = FALSE, estimate_shape = TRUE, xlab = "Year", ylab = "Length Effects",
main = "Coefficients for Length Effects", ci_method = "HPD")
stan_plot(LengthEffects)
plot_coefs(LengthEffects)
plot.coefficient(LengthEffects)
plot.coefficients(LengthEffects)
stan_plot(LengthEffects)
stan_plot(eel_test)
plot.coefficients(LengthEffects)
save.image("~/Desktop/Evolution/Tasks/Project/data/Untitled.RData")
