learnPopGen
install.packages("learnPopGen")
coalescent.plot
coalescent.plot()
install.packages("learnPopGen")
install.packages("adegenet")
install.packages("poppr")
install.packages("dplyr")
install.packages("hierfstat")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("RColorBrewer")
install.packages("scales")
coalescent.plot
coalescent.plot()
?coalescent.plot
library(adegenet)
library(poppr)
library(dplyr)
library(hierfstat)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(reshape2)
library(ggplot2)
library(RColorBrewer)
library(scales)
?coalescent.plot
lobster <- read.csv("https://jonsmitchell.com/data/lobster_genotypes.csv")
lobster_wide <- reshape(lobster, idvar = c("ID","Site"), timevar = "Locus", direction = "wide", sep = "")
colnames(lobster_wide) <- gsub("Genotype", "", colnames(lobster_wide))
snpgeno <- lobster_wide[ , 3:ncol(lobster_wide)]
snps_to_remove <- c("25580", "32362", "41521", "53889", "65376", "8953", "21197", "15531", "22740", "28357", "33066", "51507", "53052", "53263", "21880", "22323", "22365")
snpgeno <- snpgeno[ , !colnames(snpgeno) %in% snps_to_remove]
ind <- as.character(lobster_wide$ID)
site <- as.character(lobster_wide$Site)
lobster_gen <- df2genind(snpgeno, ploidy = 2, ind.names = ind, pop = site, sep = "")
lobster_gen <- missingno(lobster_gen, type = "geno", cutoff = 0.20)
mlg(lobster_gen)
dups_lobster <- mlg.id(lobster_gen)
lob_dups <- c()
x <- 1
x <- x + 1
for (i in dups_lobster){
if (length(dups_lobster[i]) > 1){
lob_dups[x] <- i
x <- x + 1
}
}
warnings()
save.image("~/Untitled.RData")
setwd("Desktop/Evolutions/Tasks/Final_Project")
setwd("/Desktop/Evolutions/Tasks/Final_Project")
setwd("~cd /Desktop/Evolutions/Tasks/Final_Project")
library(meme)
setwd('~/Desktop/Evolution/Tasks/Task_10')
x <- rnorm(n = 100, mean = 0, sd = 2)
x
y <- x*5+2+runif(100, min = 0, max = 0.1)
y
linmodel <- lm(y~x)
plot(linmodel)
x <- rnorm(100, mean = 0, sd = 2)
z[i] <- runif(1, min = 0.5, max = 2)
plot(z, slope, xlab = "Z Estimated Slope")
abline(lm(slope~z), col = "red")
slope <- vector("numeric", 100)
intercept <- vector("numeric", 100)
z <- vector("numeric", 100)
for (i in 1:100) {
x <- rnorm(100, mean = 0, sd = 2)
z[i] <- runif(1, min = 0.5, max = 2)
y <- x*5+2+runif(100, min = 0, max = 0.1)
linearmodel <- lm(y~x)
intercept[i] <- coef(linearmodel)[1]*z[i]+2
slope[i] <- coef(linearmodel)[2]*z[i]
}
plot(z, slope, xlab = "Z Estimated Slope")
abline(lm(slope~z), col = "red")
?system.file
meme(data.file)
data.file <- "~/Desktop/affleck.jpg"
meme(data.file)
text <- "Me and my friend after taking one of Dr. Mitchell's exams"
meme_text <- draw_image(data.file, text, pos = "bottom")
meme_text <- draw_text(data.file, text, pos = "bottom")
?meme
?meme_t
?meme_text
?meme
# Load your image
image <- readJPEG("~/Desktop/affleck.jpg")
install.packages("jpeg")
library(jpeg)
# Load your image
image <- readJPEG("~/Desktop/affleck.jpg")
plot(0:1, 0:1, type = "n", xlab = "", ylab = "", main = "")
rasterImage(image, 0, 0, 1, 1)
bottom_text <- "Me and my friend after taking one of Dr. Mitchell's exams"
meme_with_text <- meme(image, bottom = bottom_text)
meme_with_text <- meme(data.file, bottom = bottom_text)
meme_with_text <- meme(data.file)
meme(meme_with_text)
meme(data.file)
bottom_text <- "Me and my friend after taking one of Dr. Mitchell's exams"
meme_with_text <- meme(data.file)
meme_with_text <- meme(data.file, bottom = bottom_text)
?meme
meme_with_text <- meme_text(data.file, bottom = bottom_text)
install.packages("magick")
library(magick)
image_with_text <- image_annotate(data.file, bottom_text, gravity = "south", color = "white", size = 40)
image_read(data.file)
if (!inherits(data.file, "magick-image")) {
stop("The 'image' argument is not a magick image object.")
}
pic <- system.file("angry8.jpg", packege = "meme")
meme(pic, "fuck")
library(meme)
pic <- system.file("angry8.jpg", packege = "meme")
meme(pic, "fuck")
u <- "https://pyxis.nymag.com/v1/imgs/2e7/5d7/73e020f56c4a86221823bc32113b4316d2-25-ben-affleck-sad-smoke.w710.jpg"
meme(u)
meme(u, "code", "all the things")
mmplot(u) + mm_caption("calm down", "and RTFM", color="purple")
u <- system.file("https://pyxis.nymag.com/v1/imgs/2e7/5d7/73e020f56c4a86221823bc32113b4316d2-25-ben-affleck-sad-smoke.w710.jpg", package = "meme")
meme(u)
u <- "https://pyxis.nymag.com/v1/imgs/2e7/5d7/73e020f56c4a86221823bc32113b4316d2-25-ben-affleck-sad-smoke.w710.jpg"
meme(u)
plot(u, size = 2, "happy friday!", "wait, sorry, it's monday", color = "firebrick", font = "Courier")
plot(u)
u + list(upper = "#barbarplots",
lower = "friends don't let friends make bar plots",
color = "firebrick", font = "Courier", size=1.5)
u + aes(upper = "#barbarplots",
lower = "friends don't let friends make bar plots",
color = firebrick, font = Courier, size=1.5)
u + aes(upper = "#barbarplots",
lower = "friends don't let friends make bar plots", size=1.5)
meme(u, "", "Me after taking one of Dr. Mitchell's exams")
library(meme)
library(jpeg)
m <- readJPEG("affleck.jpeg")
m <- readJPEG("affleck.jpeg")
m <- readJPEG("affleck.jpg")
m <- "~/Desktop/affleck.jpg"
m2 <- meme(m, "Makes Plot in R", "Saves it Using Export instead of pdf( )")
plot(m2, size=2)
n <- 10000
prize <- sample(c("1", "2", "3"), size=n, replace=TRUE)
opened_door <- ifelse(prize=="1", sample(c("2", "3"), size=n, replace=TRUE), ifelse(prize=="2", "3", "2"))
closed_door <- ifelse(opened_door=="2", "3", "2")
same_door <- sum(prize=="1")/n
diff_door <- sum(prize==closed_door)/n
win_frequency <- c(same_door, diff_door)
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Chance of Winning", main="Monty Hall Odds of Winning Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Chance of Winning", ylim = c(0, 0.8) main="Monty Hall Odds of Winning Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Chance of Winning", ylim = c(0, 0.8), main="Monty Hall Odds of Winning Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Chance of Winning", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Frequency of Wins after 10,000 Simulations", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Frequency of Wins (10,000 Sims, (y * 100))", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab="Frequency of Wins (10,000 Runs, (y * 100))", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab ="Frequency of Wins (10,000 Runs,)", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab ="Frequency of Wins (10,000 Runs)", ylim = c(0, 0.8), main="Chance of Winning the Grand Prize", col="lightpink")
