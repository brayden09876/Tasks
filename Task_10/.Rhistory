load("/Users/braydenjett/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("blue", "red"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
save.image("~/Desktop/Evolution/Tasks/Project/code/Untitled.RData")
library(ggplot2)
library(tidyr)
ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
ggplot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot <- ggplot(eel_data, aes(x = decade, y = measurement, fill = Measurement_Type)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "lightpink"), labels = c("Length (mm)", "Weight (g)")) +
labs(x = "Decade", y = "Measurement") +
ggtitle("Silver Eel Change in Weight and Length by Decade")
EelPlot + theme(panel.background = element_rect(fill = "lightgray"))
EelPlot + theme(panel.background = element_rect(fill = "white"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "white"),
panel.grid.minor = element_line(color = "black"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", size = 0.5))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),  # remove vertical grid lines
panel.grid.minor.x = element_blank(),  # remove vertical grid lines
panel.grid.major.y = element_line(color = "gray"),  # add y axis line and gray horizontal grid lines
panel.grid.minor.y = element_blank(),  # remove horizontal grid lines that are not at multiples of 500
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
EelPlot + geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5))
+ geom_vline(xintercept = 0, linetype = "solid", color = "gray")
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
vline = geom_vline(xintercept = 0, color = "gray", linetype = "solid"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_line(color = "gray"))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, size = 1))
EelPlot + theme(panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color = "gray"),
panel.grid.minor.y = element_blank(),
panel.grid.major = element_line(color = "gray", linewidth = 0.5),
panel.border = element_rect(color = "black", fill = NA, linewidth = 1))
install.packages("rstatix")
library(rstatix)
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
weight_anova <- eel_data %>%
group_by(year) %>%
summarise(mean_weight = mean(weight)) %>%
anova_test(dv = mean_weight, wid = year)
rlang::last_error()
weight_anova
library(ggplot2)
library(tidyr)
install.packages("pgirmess")
library(pgirmess)
kruskal.test(New_Data$length ~ New_Data$decade)
kruskal.test(New_Data$weight ~ New_Data$decade)
New_Data$decade
install.packages("dunn.test")
library(dunn.test)
dunn.test(New_Data$length, New_Data$decade, method = "bonferroni")
dunn.test(New_Data$weight, New_Data$decade, method = "bonferroni")
library(bayesplot)
library(brms)
library(ggplot2)
library(rstan)
stan_plot(LengthEffects, pars, include = TRUE, unconstrain = FALSE)
setwd("~/Desktop/Evolution/Tasks/Project/data")
Data <- read.csv("ImsaOtoData_2.csv")
names(Data)
Data$length
Data$weight
New_Data <- subset(Data, select = c(year, length, weight))
New_Data$length
New_Data <- subset(New_Data, complete.cases(New_Data$year, New_Data$length, New_Data$weight))
New_Data$length
New_Data$weight
New_Data$year
New_Data$year <- factor(New_Data$year, levels = c(1982, 1986, 1991, 1992, 2012, 2014, 2015, 2016))
eel_test <- brm(bf(length ~ (1 | year), sigma ~ (1 | year)),
data = New_Data, family = gaussian())
eel_test
plot(eel_test)
weight_test <- brm(bf(weight ~ (1 | year), sigma ~ (1 | year)),
data = New_Data, family = gaussian())
weight_test
plot(weight_test)
LengthEffects <- ranef(eel_test)
WeightEffects <- ranef(weight_test)
stan_plot(LengthEffects, pars, include = TRUE, unconstrain = FALSE)
fit <- stan_demo(eel_test)
fit <- stan_demo(eel_test)
fit <- stan_demo()
stan_plot(LengthEffects, point_est = "mean", show_density = TRUE, fill_color = "maroon")
stan_plot(eel_test, point_est = "mean", show_density = TRUE, fill_color = "maroon")
class(eel_test)
class(LengthEffects)
install.packages("ggdist")
coef_eel <- fixef(eel_test)
coef_weight <- fixef(weight_test)
pred_df <- data.frame(length = seq(min(New_Data$length), max(New_Data$length), length.out = 100),
weight = seq(min(New_Data$weight), max(New_Data$weight), length.out = 100),
year = rep(levels(New_Data$year), each = 100))
pred_df <- add_epred_draws(eel_test, pred_df, dpar = c("mu", "sigma"))
install.packages("tidybayes")
library(tidybayes)
pred_df <- add_epred_draws(eel_test, pred_df, dpar = c("mu", "sigma"))
rm(coef_eel)
rm(coef_weight)
rm(pred_df)
library(magrittr)
library(dplyr)
library(purrr)
library(forcats)
library(tidyr)
library(modelr)
library(ggdist)
library(tidybayes)
library(ggplot2)
library(cowplot)
library(rstan)
library(brms)
library(ggrepel)
library(RColorBrewer)
library(gganimate)
library(posterior)
library(distributional)
theme_set(theme_tidybayes() + panel_border())
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
install.packages("modelr")
install.packages("gganimate")
install.packages("ggrepel")
library(modelr)
library(ggrepel)
library(gganimate)
ABC %>%
data_grid(eel_test) %>%
add_epred_draws(m, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = condition)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = response), data = ABC, shape = 21, fill = "#9ECAE1", size = 2)
ABC %>%
data_grid(eel_test) %>%
add_epred_draws(eel_test, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = condition)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = response), data = ABC, shape = 21, fill = "#9ECAE1", size = 2)
New_Data %>%
data_grid(year) %>%
add_epred_draws(eel_test, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = year)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = length), shape = 21, fill = "#9ECAE1", size = 2)
New_Data %>%
data_grid(year) %>%
add_epred_draws(eel_test, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = year)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = eel_test$length), shape = 21, fill = "#9ECAE1", size = 2)
New_Data %>%
data_grid(year) %>%
add_epred_draws(eel_test, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = year)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = year), shape = 21, fill = "#9ECAE1", size = 2)
eel_test
New_Data %>%
data_grid(year) %>%
add_epred_draws(eel_test, dpar = c("mu", "sigma")) %>%
sample_draws(30) %>%
ggplot(aes(y = year)) +
stat_slab(aes(xdist = dist_normal(mu, sigma)),
slab_color = "gray65", alpha = 1/10, fill = NA
) +
geom_point(aes(x = length), shape = 21, fill = "#9ECAE1", size = 2)
setwd('~/Desktop/Evolution/Tasks/Task_10')
x <- rnorm(n = 100, mean = 0, sd = 2)
x
y <- x*5+2+runif(100, min = 0, max = 0.1)
y
linmodel <- lm(y~x)
plot(linmodel)
x <- rnorm(100, mean = 0, sd = 2)
z[i] <- runif(1, min = 0.5, max = 2)
slope <- vector("numeric", 100)
intercept <- vector("numeric", 100)
z <- vector("numeric", 100)
for (i in 1:100) {
x <- rnorm(100, mean = 0, sd = 2)
z[i] <- runif(1, min = 0.5, max = 2)
y <- x*5+2+runif(100, min = 0, max = 0.1)
linearmodel <- lm(y~x)
intercept[i] <- coef(linearmodel)[1]*z[i]+2
slope[i] <- coef(linearmodel)[2]*z[i]
}
plot(z, slope, xlab = "Z Estimated Slope")
abline(lm(slope~z), col = "red")
n <- 10000
prize <- sample(c("1", "2", "3"), size = n, replace = TRUE)
opened_door <- ifelse(prize == "1", sample(c("2", "3"), size = n, replace = TRUE), ifelse(prize == "2", "3", "2"))
closed_door <- ifelse(opened_door == "2", "3", "2")
same_door <- sum(prize =="1")/n
diff_door <- sum(prize == closed_door)/n
win_frequency <- c(same_door, diff_door)
barplot(win_frequency, names.arg = c("Same Door", "Different Door"), ylab ="Frequency of Wins (10,000 Runs)", ylim = c(0, 0.8), main = "Chance of Winning the Grand Prize", col = "lightpink")
u <- "https://pyxis.nymag.com/v1/imgs/2e7/5d7/73e020f56c4a86221823bc32113b4316d2-25-ben-affleck-sad-smoke.w710.jpg"
meme(u, "", "Me after taking one of Dr. Mitchell's exams", size = 2)
library(meme)
meme(u, "", "Me after taking one of Dr. Mitchell's exams", size = 2)
meme(u, "Me after taking one of Dr. Mitchell's exams", size = 2)
u <- "https://pyxis.nymag.com/v1/imgs/2e7/5d7/73e020f56c4a86221823bc32113b4316d2-25-ben-affleck-sad-smoke.w710.jpg"
meme(u, "Me after taking one of Dr. Mitchell's exams", size = 2)
u <- "~/Desktop/affleck.jpg"
meme(u, "Me after taking one of Dr. Mitchell's exams", size = 2)
t <- "https://media.okmagazine.com/brand-img/fbwM8YSO5/1440x753/ben-smokes-pp-1661880502878.jpg"
meme(t, "Lol")
meme(t, "", "Lol")
u <- "~/Desktop/affleck.jpg"
meme(u, "Me after taking one of Dr. Mitchell's exams", size = 2)
meme(u, "", "Me after taking one of Dr. Mitchell's exams", size = 1)
t <- "https://listverse.com/wp-content/uploads/2009/01/obama-smoking-tm.jpg"
meme(t, "", "Me looking at Dr. Mitchell after a rough exam")
meme(t, "", "Me looking at Dr. Mitchell after a rough exam", size = 1.5)
